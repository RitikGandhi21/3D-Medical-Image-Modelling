
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){



'use strict';


/* globals dat, AMI*/

// VJS classes we will be using in this lesson




var LoadersVolume = AMI.default.Loaders.Volume;
var ControlsTrackball = AMI.default.Controls.Trackball;
var HelpersStack = AMI.default.Helpers.Stack;

// Setup renderer
var container = document.getElementById('container');
var renderer = new THREE.WebGLRenderer({
  antialias: true
});
renderer.setSize(container.offsetWidth, container.offsetHeight);
renderer.setClearColor(0x353535, 1);
renderer.setPixelRatio(window.devicePixelRatio);
container.appendChild(renderer.domElement);

// Setup scene
var scene = new THREE.Scene();

// Setup camera
var camera = new THREE.PerspectiveCamera(45, container.offsetWidth / container.offsetHeight, 0.01, 10000000);
camera.position.x = 150;
camera.position.y = 150;
camera.position.z = 100;

// Setup controls
var controls = new ControlsTrackball(camera, container);

/**
 * Handle window resize
 */
function onWindowResize() {
  camera.aspect = container.offsetWidth / container.offsetHeight;
  camera.updateProjectionMatrix();

  renderer.setSize(container.offsetWidth, container.offsetHeight);
}

window.addEventListener('resize', onWindowResize, false);

/**
 * Build GUI
 */
function gui(stackHelper) {
  var stack = stackHelper.stack;
  var gui = new dat.GUI({
    autoPlace: false
  });
  var customContainer = document.getElementById('my-gui-container');
  customContainer.appendChild(gui.domElement);

  // stack
  var stackFolder = gui.addFolder('Stack');
  // index range depends on stackHelper orientation.
  var index = stackFolder.add(stackHelper, 'index', 0, stack.dimensionsIJK.z - 1).step(1).listen();
  var orientation = stackFolder.add(stackHelper, 'orientation', 0, 2).step(1).listen();
  orientation.onChange(function (value) {
    index.__max = stackHelper.orientationMaxIndex;
    // center index
    stackHelper.index = Math.floor(index.__max / 2);
  });
  stackFolder.open();

  // slice
  var sliceFolder = gui.addFolder('Slice');
  sliceFolder.add(stackHelper.slice, 'windowWidth', 1, stack.minMax[1] - stack.minMax[0]).step(1).listen();
  sliceFolder.add(stackHelper.slice, 'windowCenter', stack.minMax[0], stack.minMax[1]).step(1).listen();
  sliceFolder.add(stackHelper.slice, 'intensityAuto').listen();
  sliceFolder.add(stackHelper.slice, 'invert');
  sliceFolder.open();

  // bbox
  var bboxFolder = gui.addFolder('Bounding Box');
  bboxFolder.add(stackHelper.bbox, 'visible');
  bboxFolder.addColor(stackHelper.bbox, 'color');
  bboxFolder.open();

  // border
  var borderFolder = gui.addFolder('Border');
  borderFolder.add(stackHelper.border, 'visible');
  borderFolder.addColor(stackHelper.border, 'color');
  borderFolder.open();
}

/**
 * Start animation loop
 */
//console.log("JSON------>");
//console.log(document.currentScript.getAttribute('jsonPath'));

function animate() {
  controls.update();
  renderer.render(scene, camera);

  // request new frame
  requestAnimationFrame(function () {
    animate();
  });
}
animate();

// Setup loader
var loader = new LoadersVolume(container);



var t2 = parsed;
console.log(t2)
var files = t2.map(function (v) {

   return path + v;
});



loader.load(files).then(function () {
  // merge files into clean series/stack/frame structure
  var series = loader.data[0].mergeSeries(loader.data);
  var stack = series[0].stack[0];
  loader.free();
  loader = null;
  // be carefull that series and target stack exist!
  var stackHelper = new HelpersStack(stack);
  stackHelper.bbox.color = 0x8BC34A;
  stackHelper.border.color = 0xF44336;

  scene.add(stackHelper);

  // build the gui
  gui(stackHelper);

  // center camera and interactor to center of bouding box
  var centerLPS = stackHelper.stack.worldCenter();
  camera.lookAt(centerLPS.x, centerLPS.y, centerLPS.z);
  camera.updateProjectionMatrix();
  controls.target.set(centerLPS.x, centerLPS.y, centerLPS.z);
}).catch(function (error) {
  window.console.log('oops... something went wrong...');
  window.console.log(error);
});

},{}]},{},[1])
//# sourceMappingURL=data:application/

//;charset=utf-8;base64,
